name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  repository_dispatch:
    types: [trigger-deployment]

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    # Pula os testes se for acionado por outro serviço
    if: github.event_name != 'repository_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: false

      - name: List directory structure
        run: ls -la && ls -la tech && find tech -type d | sort

      - name: Install dependencies with Poetry
        working-directory: ./tech
        run: |
          poetry install
          poetry add pytest pytest-cov behave coverage --group dev
          poetry show

      - name: Run unit tests with coverage
        working-directory: ./tech
        run: |
          poetry run pytest tests --cov=tech --cov-report=xml:coverage.xml --cov-report=term

      - name: Run BDD tests with Behave
        working-directory: ./tech
        run: |
          poetry run behave tests/tech/bdd/features

      - name: Move coverage reports to root
        run: |
          if [ -f tech/coverage.xml ]; then
            cp tech/coverage.xml ./coverage.xml
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=payments_microservice
            -Dsonar.projectName="Payments Microservice"
            -Dsonar.sources=tech
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.exclusions=**/__pycache__/**,**/tests/**,**/*.html,**/htmlcov/**,**/.scannerwork/**
            -Dsonar.coverage.exclusions=**/tests/**/*,**/test_*.py,**/__init__.py,**/migrations/**,**/migrations/versions/**,**/env.py,**/settings.py,**/config.py,**/configurations.py,**/schemas/**,**/schemas/*.py,**/models.py,**/models/**,**/dependencies.py,**/app.py,**/api/app.py,**/tech/api/app.py,**/tech/tech/api/payments_router.py,**/tech/tech/api/dependencies.py,**/tech/tech/domain/security.py,**/tech/tech/domain/value_objects.py,**/tech/tech/infra/repositories/user_mapper.py,**/tech/tech/interfaces/schemas/message_schema.py,**/tech/tech/interfaces/schemas/payment_schema.py,**/tech/tech/workers/**,**/tech/tech/infra/settings/**,**/tech/tech/infra/settings/settings.py,**/tech/tech/infra/databases/database.py,**/tech/tech/infra/rabbitmq_broker.py,**/tech/tech/infra/repositories/sql_alchemy_models.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./tech
          file: ./tech/Dockerfile
          push: true
          tags: |
            131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/payments:latest
            131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/payments:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            POETRY_VERSION=1.5.1

  # Deploy após o teste e build bem-sucedidos
  deploy-normal:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name != 'repository_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name tech-eks-cluster --region us-east-1

      - name: List Kubernetes files
        run: |
          echo "Listing available Kubernetes files:"
          ls -la tech/k8s/

      - name: Apply Kubernetes configurations
        run: |
          if [ -f tech/k8s/namespace.yaml ]; then
            kubectl apply -f tech/k8s/namespace.yaml
          fi
          
          if [ -f tech/k8s/postgres-deployment.yaml ]; then
            kubectl apply -f tech/k8s/postgres-deployment.yaml
          fi
          
          if [ -f tech/k8s/postgres-service.yaml ]; then
            kubectl apply -f tech/k8s/postgres-service.yaml
          fi
          
          if [ -f tech/k8s/rabbit-deployment.yaml ]; then
            kubectl apply -f tech/k8s/rabbit-deployment.yaml
          fi
          
          if [ -f tech/k8s/job.yaml ]; then
            JOB_NAME=$(grep -o 'name: [a-zA-Z0-9-]*' tech/k8s/job.yaml | head -1 | awk '{print $2}')
            NAMESPACE=$(grep -o 'namespace: [a-zA-Z0-9-]*' tech/k8s/namespace.yaml | head -1 | awk '{print $2}')
            
            if [ -z "$NAMESPACE" ]; then
              NAMESPACE="payments"
            fi
            
            if [ -n "$JOB_NAME" ]; then
              kubectl delete job $JOB_NAME -n $NAMESPACE --ignore-not-found=true
            else
              kubectl delete job payments-db-migration -n $NAMESPACE --ignore-not-found=true
            fi
            
            kubectl apply -f tech/k8s/job.yaml
          fi
          
          if [ -f tech/k8s/deployment_worker.yaml ]; then
            kubectl apply -f tech/k8s/deployment_worker.yaml
          fi
          
          kubectl set image deployment/payments-api payments-api=131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/payments:latest -n payments || kubectl apply -f tech/k8s/deployment.yaml
          
          if [ -f tech/k8s/service.yaml ]; then
            kubectl apply -f tech/k8s/service.yaml
          fi
          
          if [ -f tech/k8s/service-payment.yaml ]; then
            kubectl apply -f tech/k8s/service-payment.yaml
          fi
          
          if [ -f tech/k8s/service-rabbit.yaml ]; then
            kubectl apply -f tech/k8s/service-rabbit.yaml
          fi

      # Aciona os deploys dos outros serviços
      - name: Trigger other microservices
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            https://api.github.com/repos/kauan1020/orders_microservice/dispatches \
            -d '{"event_type":"trigger-deployment","client_payload":{"repository":"payments_microservice"}}'
            
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            https://api.github.com/repos/kauan1020/users_microservice/dispatches \
            -d '{"event_type":"trigger-deployment","client_payload":{"repository":"payments_microservice"}}'
            
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            https://api.github.com/repos/kauan1020/product_microservice/dispatches \
            -d '{"event_type":"trigger-deployment","client_payload":{"repository":"payments_microservice"}}'

  # Deploy quando acionado por outro microsserviço
  deploy-triggered:
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name tech-eks-cluster --region us-east-1

      - name: List Kubernetes files
        run: |
          echo "Listing available Kubernetes files:"
          ls -la tech/k8s/

      - name: Apply Kubernetes configurations
        run: |
          if [ -f tech/k8s/namespace.yaml ]; then
            kubectl apply -f tech/k8s/namespace.yaml
          fi
          
          if [ -f tech/k8s/postgres-deployment.yaml ]; then
            kubectl apply -f tech/k8s/postgres-deployment.yaml
          fi
          
          if [ -f tech/k8s/postgres-service.yaml ]; then
            kubectl apply -f tech/k8s/postgres-service.yaml
          fi
          
          if [ -f tech/k8s/rabbit-deployment.yaml ]; then
            kubectl apply -f tech/k8s/rabbit-deployment.yaml
          fi
          
          if [ -f tech/k8s/job.yaml ]; then
            JOB_NAME=$(grep -o 'name: [a-zA-Z0-9-]*' tech/k8s/job.yaml | head -1 | awk '{print $2}')
            NAMESPACE=$(grep -o 'namespace: [a-zA-Z0-9-]*' tech/k8s/namespace.yaml | head -1 | awk '{print $2}')
            
            if [ -z "$NAMESPACE" ]; then
              NAMESPACE="payments"
            fi
            
            if [ -n "$JOB_NAME" ]; then
              kubectl delete job $JOB_NAME -n $NAMESPACE --ignore-not-found=true
            else
              kubectl delete job payments-db-migration -n $NAMESPACE --ignore-not-found=true
            fi
            
            kubectl apply -f tech/k8s/job.yaml
          fi
          
          if [ -f tech/k8s/deployment_worker.yaml ]; then
            kubectl apply -f tech/k8s/deployment_worker.yaml
          fi
          
          kubectl set image deployment/payments-api payments-api=131793876715.dkr.ecr.us-east-1.amazonaws.com/microservices/payments:latest -n payments || kubectl apply -f tech/k8s/deployment.yaml
          
          if [ -f tech/k8s/service.yaml ]; then
            kubectl apply -f tech/k8s/service.yaml
          fi
          
          if [ -f tech/k8s/service-payment.yaml ]; then
            kubectl apply -f tech/k8s/service-payment.yaml
          fi
          
          if [ -f tech/k8s/service-rabbit.yaml ]; then
            kubectl apply -f tech/k8s/service-rabbit.yaml
          fi
